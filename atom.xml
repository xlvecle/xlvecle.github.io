<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[xlvecle's blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://xlvecle.github.io/"/>
  <updated>2015-04-22T11:10:05.854Z</updated>
  <id>http://xlvecle.github.io/</id>
  
  <author>
    <name><![CDATA[xlvecle]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[利用Git@OSC提供的hook实现自动化部署]]></title>
    <link href="http://xlvecle.github.io/2015/04/22/%E5%88%A9%E7%94%A8Git-OSC%E6%8F%90%E4%BE%9B%E7%9A%84hook%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <id>http://xlvecle.github.io/2015/04/22/利用Git-OSC提供的hook实现自动化部署/</id>
    <published>2015-04-22T08:47:43.000Z</published>
    <updated>2015-04-22T11:10:05.854Z</updated>
    <content type="html"><![CDATA[<p>今天找了找免费的Git私有代码仓库，发现<a href="http://git.oschina.net/" target="_blank" rel="external">Git@OSC</a>是个不错的选择，更让人惊喜的是提供了钩子(hook)，可以在每次push代码后，给远程HTTP URL发送一个POST请求，实在是自动部署的利器。<a id="more"></a></p>
<blockquote>
<p>使用探究</p>
</blockquote>
<p>我在这里使用php来接收push请求，然后解析请求带来的json数据，取出需要的部分留着后面用。取出的数据包括钩子密码、commit信息以及project url等。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$hook_data</span> = json_decode(<span class="variable">$_REQUEST</span>[<span class="string">'hook'</span>]);</span><br><span class="line"><span class="variable">$req_time</span> = date(<span class="string">'Y-m-d-G:i:s'</span>, <span class="variable">$_SERVER</span>[<span class="string">'REQUEST_TIME'</span>]);</span><br><span class="line"><span class="variable">$passwd</span> = <span class="variable">$hook_data</span>-&gt;password;</span><br><span class="line"><span class="variable">$new_commit</span> = <span class="variable">$hook_data</span>-&gt;push_data-&gt;commits[count(<span class="variable">$hook_data</span>-&gt;push_data-&gt;commits)-<span class="number">1</span>];</span><br><span class="line"><span class="variable">$new_commit_msg</span> = <span class="variable">$new_commit</span>-&gt;message;</span><br><span class="line"><span class="variable">$project_name</span> = explode(<span class="string">'.'</span>,explode(<span class="string">'/'</span>,<span class="variable">$hook_data</span>-&gt;push_data-&gt;repository-&gt;url)[<span class="number">1</span>])[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后做一次判断，校验密码以及匹配是否为release版本。进入if之后，调用exec打一条log并执行一个shell脚本。在调用exec中遇到了许多问题，比如你可能会发现我在输出log时我没有使用重定向而用了指令tee，这些问题看起来细小但却很烦人，我会在后面提到这些问题的解决办法。我本来打算把脚本都用exec写在php文件中，但是在php中写shell实在很捉急，所以我选择把拉取代码，清理目录并发布的脚本都写在了另一个文件中。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$passwd</span> == <span class="string">'passwd'</span> &amp;&amp; preg_match(<span class="string">'/release/'</span>, <span class="variable">$new_commit_msg</span>)) &#123;</span><br><span class="line">	exec(<span class="string">"sudo echo '"</span>.<span class="variable">$req_time</span>.<span class="string">"\ndeploy\n=====================================' |sudo tee -a "</span>.<span class="variable">$project_name</span>.<span class="string">"_deploy.log"</span>);</span><br><span class="line">	exec(<span class="string">"cd /var/www/html/"</span>.<span class="variable">$project_name</span>.<span class="string">"Deploy \n sudo ./oscAutoDeploy "</span>.<span class="variable">$project_url</span>.<span class="string">" "</span>.<span class="variable">$project_name</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果判断没有通过，为了安全性，我在这里会返回一条警告信息并输出一条log。log信息中记录了请求的时间，IP以及UA，方便分析排查问题来源。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span>(<span class="string">"don't do this"</span>);</span><br><span class="line">exec(<span class="string">"sudo echo '"</span>.<span class="variable">$req_time</span>.<span class="string">"\na serious man try to deploy\nfrom "</span>.getIP().<span class="string">"\nua: "</span>.getallheaders()[<span class="string">'User-Agent'</span>].<span class="string">"\n=====================================' |sudo tee -a /var/logs/iudang/"</span>.<span class="variable">$project_name</span>.<span class="string">"_attack.log"</span>);</span><br></pre></td></tr></table></figure>
<p>上面获取用户IP我使用的是一种非常清晰的方法，和之前谈过的<a href="">使用php请求api</a>问题一样，搜索之后的答案五花八门，千奇百怪，大多丑且不忍直视，虽然我的这一段if else过多但是论清晰度论实效都是很不错的。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIP</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">"HTTP_CLIENT_IP"</span>))</span><br><span class="line">        <span class="variable">$ip</span> = getenv(<span class="string">"HTTP_CLIENT_IP"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(getenv(<span class="string">"HTTP_X_FORWARDED_FOR"</span>))</span><br><span class="line">        <span class="variable">$ip</span> = getenv(<span class="string">"HTTP_X_FORWARDED_FOR"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(getenv(<span class="string">"REMOTE_ADDR"</span>))</span><br><span class="line">        <span class="variable">$ip</span> = getenv(<span class="string">"REMOTE_ADDR"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="variable">$ip</span> = <span class="string">"Unknow"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$ip</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在php文件写完之后，我们就开始写真正负责部署发布的shell脚本了。在上面我们传入了project_url和project_name两个参数，这里根据它们进行目录整理及克隆部署工作，因为php部署比较简单，所以工作量很小，如果要部署其他语言应用可以根据自己的实际需求进行编写。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> <span class="operator">-e</span></span><br><span class="line"><span class="keyword">if</span> [ ! <span class="variable">$1</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">'no git url'</span></span><br><span class="line">	<span class="built_in">exit</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! <span class="variable">$2</span> ]  </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">'no project name'</span></span><br><span class="line">	<span class="built_in">exit</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">TARGET_DIR=/var/www/html/<span class="variable">$2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#init</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="operator">-d</span> <span class="variable">$TARGET_DIR</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">'clean dir'</span></span><br><span class="line">	sudo rm -rf <span class="variable">$TARGET_DIR</span></span><br><span class="line">	sudo mkdir -p <span class="variable">$TARGET_DIR</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">'create dir'</span></span><br><span class="line">	sudo mkdir -p <span class="variable">$TARGET_DIR</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#git clone</span></span><br><span class="line">sudo git <span class="built_in">clone</span> <span class="variable">$1</span> <span class="variable">$TARGET_DIR</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'success'</span></span><br></pre></td></tr></table></figure>
<p>写完之后我们在Git@OSC的管理界面进行设置。<br><img src="/img/git_osc_hook.jpg" alt="git_osc_hook.jpg"></p>
<p>然后自己的项目也可以享受git push，然后自动发布的快感了。</p>
<hr>
<p>下面是今天碰到的一些问题和解决方法。</p>
<blockquote>
<p>exec()执行外部linux脚本问题及解决</p>
</blockquote>
<p>首先碰到的问题是exec()函数无法执行的问题，因为php.ini默认是没有开启这个函数的，需要我们去修改配置文件（如果不知道php配置文件在哪里请用phpinfo()查看）。然后再php.ini中会会有一个disable_functions，把后面的pcntl_exec删掉就可以了。</p>
<p>启用了exec()，这下应该能用了吧？想太多了，还有坑呢。因为我们执行一些命令的时候权限不够。这时候首先来查看apache的执行用户是谁，sudo lsof -i:80<br><img src="/img/lsof-i.jpg" alt="lsof-i.jpg"></p>
<p>我们看到是一个叫做www-data的用户，为了让这个用户能够享用使用sudo而不需要密码的权利我们需要配置一下sudoers，sudo vim /etc/sudoers，在文件中加入下面的语句即可。<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">www</span>-<span class="typedef"><span class="keyword">data</span> <span class="type">ALL</span>=<span class="container">(<span class="type">ALL</span>:<span class="type">ALL</span>)</span> <span class="type">NOPASSWD</span>:<span class="type">ALL</span></span></span><br></pre></td></tr></table></figure></p>
<p>必要的时候还需要注释掉 default requiretty 。</p>
<p>上面的操作完成之后应该就可以使用exec()执行linux命令了，然后我碰到了一个很有意思的问题，就是在前面提到的重定向权限不够的问题。比如执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">echo</span> <span class="string">'hi'</span> &gt;/<span class="built_in">test</span></span><br></pre></td></tr></table></figure></p>
<p>会发现提示”-bash: /test: Permission denied”，有机智的同学可能会想到’&gt;’和’&gt;&gt;’也是命令啊，他们没有root权限，确实是这样的，但是你在’&gt;’前面加一个sudo不能解决任何问题。</p>
<p>为了解决这个问题我们可以在命令中加入’sh -c’，如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="built_in">echo</span> <span class="string">'hi'</span> &gt;/<span class="built_in">test</span></span><br></pre></td></tr></table></figure></p>
<p>这样可以让sudo的权限扩展到整个语句，使得重定向符也拥有root权限。</p>
<p>另一种方法就是我使用的，使用tee指令，然后用管道符’|’链接，它和’&gt;’效果是一样的，加上参数’-a’之后和’&gt;&gt;’效果相同。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'hi'</span> |sudo tee /<span class="built_in">test</span></span><br></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>apache2开启mod_rewrite以及使用</p>
</blockquote>
<p>开启rewrite并合理配置.htaccess之后可以让我们php项目的地址显得更加漂亮简洁，而不必去访问一个丑陋的xxx.com/xxx.php。</p>
<p>不过使用apt安装的apache时并没有默认开启rewrite module的，需要我们手动做一些配置。</p>
<p>ubuntu14.04安装apache2之后的配置文件有了些许的变化，不是往常的httpd.conf而是/etc/apache2/apache2.conf，打开之后我们发现新的配置文件已经把mods-enabled的配置放在了mods-enabled的目录下，里面都是从mods-available目录下面拉过来的软链接，我们只需要<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln <span class="operator">-s</span> ../mods-available/rewrite.load</span><br></pre></td></tr></table></figure></p>
<p>即可。或者图简单可以直接在apache2.conf中添加<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule rewrite_module <span class="regexp">/usr/</span>lib<span class="regexp">/apache2/m</span>odules<span class="regexp">/mod_rewrite.so</span></span><br></pre></td></tr></table></figure></p>
<p>然后将目录设置下的AllowOverride None改为AllowOverride ALL，我们的rewrite就可以真正生效了（不要忘记重启apache）。<br>一条典型的rewrite应该放在根目录的.htaccess文件中,下面这一条实现了匹配所有/share/xxx的地址到share.php?topicId=$1去的需求。<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword"><span class="common">RewriteEngine</span></span> <span class="literal">on</span>                      </span><br><span class="line"><span class="keyword"><span class="common">RewriteRule</span></span> ^/?share/([a-zA-Z0-9_-]+)$ share.php?topicId=<span class="number">$1</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天找了找免费的Git私有代码仓库，发现<a href="http://git.oschina.net/">Git@OSC</a>是个不错的选择，更让人惊喜的是提供了钩子(hook)，可以在每次push代码后，给远程HTTP URL发送一个POST请求，实在是自动部署的利器。]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用php请求api]]></title>
    <link href="http://xlvecle.github.io/2015/04/21/%E4%BD%BF%E7%94%A8php%E8%AF%B7%E6%B1%82api/"/>
    <id>http://xlvecle.github.io/2015/04/21/使用php请求api/</id>
    <published>2015-04-21T10:55:02.000Z</published>
    <updated>2015-04-22T11:04:28.594Z</updated>
    <content type="html"><![CDATA[<p>今天一个学弟问我这个问题，我把自己以前写的一个httpUtil发给了他，实现的很简单，不过效果还不错。<br><a id="more"></a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line">* xlvecle</span><br><span class="line">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">httpUtil</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">httpGet</span><span class="params">(<span class="variable">$url</span>, <span class="variable">$data</span> = null)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line">			<span class="variable">$data</span> = http_build_query(<span class="variable">$data</span>);</span><br><span class="line">			<span class="variable">$url</span> = <span class="variable">$url</span>.<span class="string">"?"</span>.<span class="variable">$data</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable">$opts</span> = <span class="keyword">array</span>(</span><br><span class="line">			<span class="string">'http'</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">				<span class="string">'method'</span> =&gt; <span class="string">"GET"</span>,</span><br><span class="line">				<span class="string">'timeout'</span>=&gt; <span class="string">"60"</span>,</span><br><span class="line">				<span class="string">'header'</span> =&gt; <span class="string">"Content-type: application/x-www-form-urlencoded\r\n"</span>.  </span><br><span class="line">							<span class="string">"Content-length:"</span>.strlen(<span class="variable">$data</span>).<span class="string">"\r\n"</span> .   </span><br><span class="line">							<span class="string">"Cookie: foo=bar\r\n"</span> .   </span><br><span class="line">							<span class="string">"\r\n"</span>,</span><br><span class="line">				<span class="string">'content'</span> =&gt; <span class="variable">$data</span></span><br><span class="line">				)</span><br><span class="line">			);</span><br><span class="line">		<span class="variable">$context</span> = stream_context_create(<span class="variable">$opts</span>);</span><br><span class="line">		<span class="keyword">return</span> file_get_contents(<span class="variable">$url</span>, <span class="keyword">false</span>, <span class="variable">$context</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">httpPost</span><span class="params">(<span class="variable">$url</span>, <span class="variable">$data</span> = null)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line">			<span class="variable">$data</span> = http_build_query(<span class="variable">$data</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable">$opts</span> = <span class="keyword">array</span>(</span><br><span class="line">			<span class="string">'http'</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">				<span class="string">'method'</span> =&gt; <span class="string">"POST"</span>,</span><br><span class="line">				<span class="string">'timeout'</span>=&gt; <span class="string">"60"</span>,</span><br><span class="line">				<span class="string">'header'</span> =&gt; <span class="string">"Content-type: application/x-www-form-urlencoded\r\n"</span>.  </span><br><span class="line">							<span class="string">"Content-length:"</span>.strlen(<span class="variable">$data</span>).<span class="string">"\r\n"</span> .   </span><br><span class="line">							<span class="string">"Cookie: foo=bar\r\n"</span> .   </span><br><span class="line">							<span class="string">"\r\n"</span>,</span><br><span class="line">				<span class="string">'content'</span> =&gt; <span class="variable">$data</span></span><br><span class="line">				)</span><br><span class="line">			);</span><br><span class="line">		<span class="variable">$context</span> = stream_context_create(<span class="variable">$opts</span>);</span><br><span class="line">		<span class="keyword">echo</span> file_get_contents(<span class="variable">$url</span>, <span class="keyword">false</span>, <span class="variable">$context</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天一个学弟问我这个问题，我把自己以前写的一个httpUtil发给了他，实现的很简单，不过效果还不错。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo添加rss feed]]></title>
    <link href="http://xlvecle.github.io/2015/04/07/hexo%E6%B7%BB%E5%8A%A0rss%20feed/"/>
    <id>http://xlvecle.github.io/2015/04/07/hexo添加rss feed/</id>
    <published>2015-04-07T10:25:00.000Z</published>
    <updated>2015-04-07T15:12:57.132Z</updated>
    <content type="html"><![CDATA[<p>在config.yml中添加：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">plugins:</span></span><br><span class="line">	- hexo-generator-feed</span><br></pre></td></tr></table></figure></p>
<p>在hexo目录下执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></p>
<p>然后在执行hexo g的时候便会自动生成atom.xml。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在config.yml中添加：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">]]>
    </summary>
    
      <category term="hexo" scheme="http://xlvecle.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jetty启动配置简介]]></title>
    <link href="http://xlvecle.github.io/2015/03/27/jetty%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%AE%80%E4%BB%8B/"/>
    <id>http://xlvecle.github.io/2015/03/27/jetty启动配置简介/</id>
    <published>2015-03-27T10:20:11.000Z</published>
    <updated>2015-04-07T14:51:27.412Z</updated>
    <content type="html"><![CDATA[<p>jetty是什么？</p>
<blockquote>
<p>Jetty 是一个用 Java 实现、开源、基于标准的，并且具有丰富功能的 Http 服务器和 Web 容器。</p>
</blockquote>
<p>在配置jetty的过程中，发现中文互联网中关于jetty启动配置的说明非常少，查找了不少资料，有了些许的收获，在这里分享出来（下面不讨论代码中嵌入启动jetty以及IDE启动jetty的方式）。<a id="more"></a></p>
<p>简单地启动一个jetty服务器可以使用下面的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar start.jar</span><br></pre></td></tr></table></figure></p>
<p>如果我们没有指定jetty的配置文件，jetty在启动时就会自动寻找$JETTY_HOME下的start.ini文件，所以为了提高灵活性，我们在部署项目的过程中使用自定义的配置文件，用法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar start.jar –-ini=<span class="variable">$JETTY_CONF</span></span><br></pre></td></tr></table></figure></p>
<p>在配置文件中会指定将要使用的XML文件，jetty.xml是默认的配置文件，该配置文件的根元素是Configure，另外还会看到有如下的配置元素：</p>
<ul>
<li>Set: 相当于调用setXxx 方法</li>
<li>Get: 相当于调用getXxx 方法</li>
<li>New: 创建某个类的实例</li>
<li>Arg: 为方法或构造器传入参数</li>
<li>Array: 设置一个数组</li>
<li>Item: 设置数组或集合的项</li>
<li>Call: 调用某个方法</li>
</ul>
<p>jetty.xml主要完成ThreadPool、连接器Connector、Handler等主要组件的配置，然后其他如jetty-deploy.xml、jetty-webapps.xml等文件中配置了一些其他内容。实际上，这些都写在一个配置文件中也是没有问题的。</p>
<p>在配置文件中通过传递启动参数的方法来赋值给一些如端口，context目录，war包目录等具有自定义需求的配置元素。我们在操作中使用如下（只列举了两项）的方法来获取启动参数中的值。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Set</span> <span class="attribute">name</span>=<span class="value">"contextPath"</span>&gt;</span>/<span class="tag">&lt;<span class="title">SystemProperty</span> <span class="attribute">name</span>=<span class="value">"app.context"</span>/&gt;</span><span class="tag">&lt;/<span class="title">Set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Set</span> <span class="attribute">name</span>=<span class="value">"war"</span>&gt;</span><span class="tag">&lt;<span class="title">SystemProperty</span> <span class="attribute">name</span>=<span class="value">"app.workdir"</span>/&gt;</span><span class="tag">&lt;/<span class="title">Set</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在定义好配置文件后，将war包解压放入app.workdir中，我们使用（下面只是一个简单的示范）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar start.jar -Djetty.port=<span class="variable">$PORT</span> -Dapp.context=<span class="variable">$CONTEXT</span> -Dapp.workdir=<span class="variable">$WORKDIR</span> –-ini=<span class="variable">$JETTY_CONF</span></span><br></pre></td></tr></table></figure></p>
<p>这样的命令来启动我们的java web应用，然后应该就ok了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>jetty是什么？</p>
<blockquote>
<p>Jetty 是一个用 Java 实现、开源、基于标准的，并且具有丰富功能的 Http 服务器和 Web 容器。</p>
</blockquote>
<p>在配置jetty的过程中，发现中文互联网中关于jetty启动配置的说明非常少，查找了不少资料，有了些许的收获，在这里分享出来（下面不讨论代码中嵌入启动jetty以及IDE启动jetty的方式）。]]>
    
    </summary>
    
      <category term="java" scheme="http://xlvecle.github.io/tags/java/"/>
    
      <category term="jetty" scheme="http://xlvecle.github.io/tags/jetty/"/>
    
      <category term="web" scheme="http://xlvecle.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[android5.0开发的一个小坑]]></title>
    <link href="http://xlvecle.github.io/2015/02/27/android5.0%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%9D%91/"/>
    <id>http://xlvecle.github.io/2015/02/27/android5.0开发的一个小坑/</id>
    <published>2015-02-27T14:57:53.000Z</published>
    <updated>2015-04-07T14:51:42.098Z</updated>
    <content type="html"><![CDATA[<p>  在使用API21开发的时候发现了一个问题，就是在设置layout的时候发现button的text会被自动转换成大写，真是一个奇怪的问题。<br>解决方法如下：<a id="more"></a> </p>
<blockquote>
<p>在button的layout定义中加入android:textAllCaps=”false”即可，诡异的是Android Studio居然还没有这个的自动补全，所以全靠手动敲咯。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>  在使用API21开发的时候发现了一个问题，就是在设置layout的时候发现button的text会被自动转换成大写，真是一个奇怪的问题。<br>解决方法如下：]]>
    
    </summary>
    
      <category term="android" scheme="http://xlvecle.github.io/tags/android/"/>
    
      <category term="android studio" scheme="http://xlvecle.github.io/tags/android-studio/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[实现页面底部浮动条的一个简单方法]]></title>
    <link href="http://xlvecle.github.io/2014/11/10/%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E5%BA%95%E9%83%A8%E6%B5%AE%E5%8A%A8%E6%9D%A1%E7%9A%84%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/"/>
    <id>http://xlvecle.github.io/2014/11/10/实现页面底部浮动条的一个简单方法/</id>
    <published>2014-11-10T10:57:20.000Z</published>
    <updated>2015-04-22T10:58:17.751Z</updated>
    <content type="html"><![CDATA[<p>据某童鞋给我讲，在用手机使用百度搜索的时候，百度会很流氓的在下面来一坨“速度不够快？快用百度浏览器”，真是神烦，但是有时候还真有这样的需求，该怎么实现呢？<a id="more"></a></p>
<p>这个问题网上有很多答案，但是这个问题延续了国产答案的一贯风气，复制粘贴，不肯动手，真正能放上去用的并不多。</p>
<p>用百度搜一些国内网页，包括博客以及论坛，对于一些常见IT问题的回答往往都是错误的。这里提到的这个问题也不能幸免。</p>
<p>下面这个方法简单有效并且hack了IE，不妨一试</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style="width: 100%; text-align: center; position: fixed; _position:absolute; bottom:0px; _bottom:0px; margin-bottom: 0px; _margin-top:expression(this.style.pixelHeight+document.documentElement.scrollTop);"&gt;&lt;a&gt;立即体验&lt;/a&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>据某童鞋给我讲，在用手机使用百度搜索的时候，百度会很流氓的在下面来一坨“速度不够快？快用百度浏览器”，真是神烦，但是有时候还真有这样的需求，该怎么实现呢？]]>
    
    </summary>
    
  </entry>
  
</feed>